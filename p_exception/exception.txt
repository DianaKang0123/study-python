예외 처리
    프로그램 실행 중 오류발생 시 강제 종료되기 떄문에 이를 막기 위해 예외 처리를 작성한다.
    제어문으로 오류를 막을 수 없는 상황에서는 반드시 예외 처리를 작성해야한다.


try, except문

    1.
    try:
        오류가 발생할 수 있는 문장

    except 발생오류 as 오류객체:            # 발생오류는 클래스 as 오류 객체 => 클래스를 객체화
        오류발생 시 실행할 문장

    ....

    오류가 발생 -> 오류가 자동으로 객체화 ->프로그램 종료
    이 객체의 주소를 담을 곳이 있으면 강제종료 되지 않음 -> 이 객체에 점을 찍어 오류를 출력하여 개발자가 오류를 수정

    2.
    try:
        오류가 발생할 수 있는 문장

    except 발생오류 :
        오류발생 시 실행할 문장

    ....

    자동으로 객체 주소가 담기는 문법
    개발자가 오류를 고치지 않아도 되는경우 사용

    3.

    try:
        오류가 발생할 수 있는 문장

    except
        오류발생 시 실행할 문장

    ....

    finally:
        오류 발생 여부와 상관없이 모든 상황에서 실행       # try 문의 오류문장이 메모리에 할당 되고 finally 에서 메모리에서 해제한다.


    모든 오류 클래스는 부모 클래스를 상속받기 때문에
    어떤 오류가 발생하더라도 부모클래스에서 true가 뜨기 떄문에 다 잡힐 수 있다

예외 발생시키기
    심각한 문제가 발생하기 전 일부로 프로그램을 강제 종료할 때 사용한다.
    예외를 한 곳에서 묶어서 처리하기 위해 사용한다.(상위 과정에서 다룰 예정)

    raise 발생오류

예외 만들기
    직접 만든 클래스에 Exception을 상속받으면 됨
    class 오류명(Exception):

        def __str__(self):
            return '오류메세지'